[{"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/MemoryBoard.js":"1","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/App.js":"2","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/reducers/index.js":"3","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/index.js":"4","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/actions/index.js":"5"},{"size":5289,"mtime":1611172884770,"results":"6","hashOfConfig":"7"},{"size":460,"mtime":1611173653363,"results":"8","hashOfConfig":"7"},{"size":397,"mtime":1611172869309,"results":"9","hashOfConfig":"7"},{"size":491,"mtime":1611139315130,"results":"10","hashOfConfig":"7"},{"size":165,"mtime":1611172868642,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1uhncxi",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/MemoryBoard.js",["25","26","27"],"import React,{ useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setFlippedCard } from './../actions';\n\n//import css\nimport './../styles/memory-board.css'\n\nconst MemoryBoard = props =>{\n\n    const [gameName,setGameName] = useState(props.gameName);\n    // const [selectedCard, setSelectedCard] = useState(props.flippedCard);\n    const [imgs] = useState([\n        {key:'amelie', path:require('./../assets/images/amelie.jpg').default},\n        {key:'back-to-the-future', path:require('./../assets/images/back_to_the_future.jpg').default},\n        {key:'paris_is_burning', path:require('./../assets/images/parris_is_burning.jpg').default},\n        {key:'pulp_fiction', path:require('./../assets/images/pulp_fiction.jpg').default},\n        {key:'reservior_dogs', path:require('./../assets/images/reservior_dogs.jpg').default},\n        {key:'terminator', path:require('./../assets/images/terminator.jpg').default},\n        {key:'aladdin', path:require('./../assets/images/aladdin.jpg').default},\n        {key:'dirty_dancing', path:require('./../assets/images/dirty_dancing.jpg').default},\n        {key:'nightmare_elem_street', path:require('./../assets/images/nightmare_elem_street.jpg').default},\n        {key:'big', path:require('./../assets/images/big.jpg').default},\n        {key:'mission_impossible', path:require('./../assets/images/mission_impossible.jpg').default},\n        {key:'indiana_jones', path:require('./../assets/images/indiana_jones.jpeg').default},\n        {key:'fight_club', path:require('./../assets/images/fight_club.jpg').default},\n        {key:'the_shining', path:require('./../assets/images/the_shining.jpg').default},\n        {key:'scream', path:require('./../assets/images/scream.jpg').default},\n        {key:'home_alone', path:require('./../assets/images/home_alone.jpg').default},\n        {key:'matrix', path:require('./../assets/images/matrix.jpg').default},\n        {key:'lambs_silience', path:require('./../assets/images/lambs_silience.jpg').default}\n    ]);\n\n    //fn. click on card (an image) \n    const clickCard = (e,currentFlippedCard,reduxFlippedAction) =>{\n\n        let card  = e.currentTarget;\n        //if card disabled - return\n\n        let imgHiderDiv = e.currentTarget.children[0];\n        let img  = e.currentTarget.children[1];\n\n        //first card flip (selectedCard is null)\n        if(!currentFlippedCard){\n            //set the flippedCard in redux to it's name\n            reduxFlippedAction(img.name);\n            card.classList.add('choose');\n        }\n\n        //second card flip \n        //check if the movies cards identical --> names are equal\n        //if identical -> which means the name equal to the selectedCard from redux \n            //keep cards reveal \n            //make cards disabled and cursor should be not-allow\n            //make the selectedCard null\n\n            //if game completed - all cards revealed\n                //show a message for user\n                \n        //if not - cover them\n            //make the selectedCard null\n        \n    }\n\n    //double the images countity and \"mixed\" randomly the array order for the board\n    const renderBoard = (flippedCard) =>{\n        //original arr\n        let imgsArray = imgs;\n\n        //duplicate arr\n        let imgsDup = [...imgs];\n\n        //concat both arrays so we'll have two of rach card\n        let concatImgsArrs = imgsArray.concat(imgsDup);\n\n        //shuffle array\n        concatImgsArrs = shuffle(concatImgsArrs);\n\n        let view = \n        <div className={\"board\"}>\n            {concatImgsArrs.map((img,index) => { \n                return(\n                    // iterating the imgsArr from reducer to present in squares \n                    <div className={\"card\"} key={`${img.key}-${index}`} onClick={(e)=>{clickCard(e,props.flippedCard,props.setFlippedCard)}}>\n                        <div className={\"img-hider\"}>\n                            <i className={\"icon question circle outline\"}></i>\n                        </div>\n                        <img src={`${img.path}`} alt={`memory-game-${img.key}`} className={'img'} name={`${img.key}`}/>\n                    </div> \n                );\n            })}\n        </div>\n\n        return view;\n    }\n\n    //mix randomly the order of the cards\n    const shuffle = (array) => {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n      \n        return array;\n      }\n\n\n\n    return (\n        <div className={'memory-board'}>\n            <p className={\"pre-title\"}>- Take a little break for some memory game -</p>\n            <h1 className={\"title\"}>{gameName}</h1>\n                {renderBoard(props.flippedCard)}\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) =>{\n    return { flippedCard: state.flippedCard }\n}\n\nexport default connect(mapStateToProps,{setFlippedCard})(MemoryBoard);","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/App.js",[],["28","29"],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/reducers/index.js",[],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/index.js",[],["30","31"],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/actions/index.js",[],{"ruleId":"32","severity":1,"message":"33","line":1,"column":26,"nodeType":"34","messageId":"35","endLine":1,"endColumn":35},{"ruleId":"32","severity":1,"message":"36","line":10,"column":21,"nodeType":"34","messageId":"35","endLine":10,"endColumn":32},{"ruleId":"32","severity":1,"message":"37","line":39,"column":13,"nodeType":"34","messageId":"35","endLine":39,"endColumn":24},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setGameName' is assigned a value but never used.","'imgHiderDiv' is assigned a value but never used.","no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"no-global-assign","no-unsafe-negation"]