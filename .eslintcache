[{"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/reducers/index.js":"1","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/index.js":"2","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/actions/index.js":"3","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/MemoryBoard.jsx":"4","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/App.jsx":"5","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/Card.jsx":"6","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/Modal.jsx":"7","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/movies/movies.js":"8"},{"size":616,"mtime":1611271130287,"results":"9","hashOfConfig":"10"},{"size":446,"mtime":1658333872177,"results":"11","hashOfConfig":"10"},{"size":314,"mtime":1611269726493,"results":"12","hashOfConfig":"10"},{"size":3960,"mtime":1658661690515,"results":"13","hashOfConfig":"10"},{"size":2558,"mtime":1658661667347,"results":"14","hashOfConfig":"10"},{"size":542,"mtime":1658336136430,"results":"15","hashOfConfig":"10"},{"size":1277,"mtime":1658336790754,"results":"16","hashOfConfig":"10"},{"size":1973,"mtime":1658661674997,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uhncxi",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/reducers/index.js",[],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/index.js",[],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/actions/index.js",[],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/MemoryBoard.jsx",["37","38","39","40","41"],"import React,{ useEffect, useState, useRef } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { setFlippedCard, setModal } from '../actions';\n\n//import components\nimport Card from './Card';\n\n//import css\nimport './../styles/memory-board.css'\n\nconst MemoryBoard = ({ gameName, movies, setModal, flippedCard }) =>{\n    const [val, setVal] = useState(0)\n    const dispatch = useDispatch()\n    let guessedPairsCounter = useRef(0)\n    let numOfPairs = movies.length / 2\n\n    //set success modal \n    const openModal = () =>{\n        setModal({\n            showModal:true,\n            headerTitle:'Congratulations',\n            contentTitle:'Wow!',\n            contentRunningText:`You completed the board. Epic!!`\n        });\n    }\n\n    //click on card (an image) \n    const clickCard = (cardStatus, cardImgName, cardId) =>{\n\n        let lastCardChosen = movies.filter(card => card.status === 'choose')\n        let flipped = flippedCard\n\n        //pair cards are in the revealing time \n        let isFunctionInProcess = lastCardChosen.length > 1 ? true : false\n\n        //if card already guessed or chosen or revealing time still happens - go out of the function\n        if(cardStatus === 'choose' || cardStatus === 'guessed' || isFunctionInProcess){\n            return \n        }\n\n        //first card flip \n        if(!flipped){\n            movies.map((card) => {\n                if(card.id === cardId){\n                    card.status = 'choose' \n                }\n            })\n            //set the flippedCard in redux to it's name\n            dispatch(setFlippedCard(cardImgName));\n            \n        //second card flip \n        //check if the movies cards identical\n        } else if(cardImgName === flipped){\n            movies.map((card) => { \n                if(card.name === cardImgName)\n                    card.status = 'guessed' \n            })\n            dispatch(setFlippedCard(null));\n\n            //check if all pairs guessed \n            guessedPairsCounter.current++\n\n            if(guessedPairsCounter.current === numOfPairs){ \n                setTimeout(() => {\n                    //show success modal\n                    openModal()\n                    guessedPairsCounter.current = 0\n                    movies.map(card => card.status='unrevealed')\n                }, 500);\n            }\n\n        //cards didn't match\n        } else {\n            //show the next card for 1 second\n            //and then flip it again\n            movies.map(card=>{ card.id === cardId && (card.status = 'choose')})\n            setTimeout(()=>{\n                movies.map(card=>{ \n                    if(card.id === cardId){\n                        card.status = 'unrevealed'\n                    } \n                    \n                    if(card.name === flipped && card.status === 'choose'){\n                        card.status = 'unrevealed'\n                    }\n                })\n                setVal(val+1) \n            },1000);\n            dispatch(setFlippedCard(null));\n        } \n    }\n\n    const renderBoard = () =>{\n        let view = \n            <div className={\"board\"}>\n                {movies.map((img) => { \n                    return(\n                        <Card \n                            key={`${img.id}`} \n                            img={img} \n                            click={()=>{clickCard(img.status, img.name, img.id)}}\n                            status={img.status}\n                        />\n                    );\n                })}\n            </div>\n        return view;\n    }\n\n    return (\n        <div className={\"memory-board\"}>\n            <p className={\"pre-title\"}>- Take a little break for a memory game -</p>\n            <h1 className={\"title\"}>{gameName}</h1>\n            {renderBoard()}\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) =>{\n    return { flippedCard: state.flippedCard }\n}\n\nexport default connect(mapStateToProps,{setFlippedCard,setModal})(MemoryBoard);",["42","43"],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/App.jsx",["44"],"import React,{useEffect, useState} from 'react';\n\n//redux\nimport { connect, useDispatch } from 'react-redux';\nimport { setModal } from '../actions';\n\n//components\nimport MemoryBoard from './MemoryBoard'\nimport Modal from './Modal'\n\n//styles \nimport './../styles/app.css'\nimport './../styles/modal.css'\n\n//data\nimport { movies } from '../movies/movies'\n\nconst App = ({ modalSettings }) =>{\n\n    const dispatch = useDispatch()\n\n    const [moviesImgs] = useState(movies);\n\n    const closeModal = () =>{\n        dispatch(setModal({showModal:false}))\n    }\n\n    //mix randomly the order of the cards\n    const dupAndshuffle = (array) => {\n\n        //duplicate array to get 2 kinds of every image\n        //this method will create deep copy of the objects \n        let copiedArray = array.map((obj)=>{\n            return {...obj}\n        })\n        \n        let dupShuffleArray = [...array, ...copiedArray]\n\n        //shuffle array\n        var currentIndex = dupShuffleArray.length, temporaryValue, randomIndex;\n      \n        //while there remain elements to shuffle\n        while (0 !== currentIndex) {\n      \n          //pick a remaining element\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          //and swap it with the current element.\n          temporaryValue = dupShuffleArray[currentIndex];\n          dupShuffleArray[currentIndex] = dupShuffleArray[randomIndex];\n          dupShuffleArray[randomIndex] = temporaryValue;\n        }\n\n        for(let i=0; i<dupShuffleArray.length; i++){\n            dupShuffleArray[i].id = `${dupShuffleArray[i].name}-${i}`\n        }\n      \n        return dupShuffleArray;\n    }\n\n    return (\n        <>\n            <div className={\"main-app-center\"}>\n                <MemoryBoard movies={dupAndshuffle(moviesImgs)} gameName={\"Blast From The Past...\"}/>\n            </div>\n            <Modal \n                show={modalSettings.showModal} \n                closeModal={closeModal}\n                modalTitle={modalSettings.headerTitle}\n                heroImage={modalSettings.heroImage}\n                >\n                <div className=\"row\">\n                    <div className=\"col-1\">\n                        <h2>{modalSettings.contentTitle}</h2>\n                        <p className=\"line-break\">{modalSettings.contentRunningText}</p>\n                    </div>\n                </div>\n            </Modal>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) =>{\n    return { modalSettings: state.modalSettings }\n}\n\nexport default connect(mapStateToProps)(App);\n","/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/Card.jsx",[],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/components/Modal.jsx",[],"/Users/yehudamenahem/Desktop/code_projects/react/memory-game/src/movies/movies.js",[],{"ruleId":"45","severity":1,"message":"46","line":1,"column":16,"nodeType":"47","messageId":"48","endLine":1,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":43,"column":31,"nodeType":"51","messageId":"52","endLine":43,"endColumn":33},{"ruleId":"49","severity":1,"message":"50","line":54,"column":31,"nodeType":"51","messageId":"52","endLine":54,"endColumn":33},{"ruleId":"49","severity":1,"message":"50","line":76,"column":28,"nodeType":"51","messageId":"52","endLine":76,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":78,"column":32,"nodeType":"51","messageId":"52","endLine":78,"endColumn":34},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":15,"nodeType":"47","messageId":"48","endLine":1,"endColumn":24},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-global-assign","no-unsafe-negation"]